-- Fluxcore.Hub GUI Framework (Fixed for Mobile Scrolling and Adaptive UI)
local Library = {}

local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local Gui = Instance.new("ScreenGui")
Gui.Name = "Fluxcore.Hub"
Gui.ResetOnSpawn = false
Gui.IgnoreGuiInset = true
Gui.Parent = PlayerGui

local Windows = {}

local function ApplyStyle(obj, radius)
    local corner = Instance.new("UICorner", obj)
    corner.CornerRadius = UDim.new(0, radius or 6)
    local stroke = Instance.new("UIStroke", obj)
    stroke.Thickness = 1
    stroke.Color = Color3.fromRGB(40, 40, 40)
end

-- Toggle Button (Left center and draggable)
local ToggleButton = Instance.new("TextButton")
ToggleButton.Size = UDim2.new(0, 50, 0, 50)
ToggleButton.Position = UDim2.new(0, 10, 0.5, -25)
ToggleButton.AnchorPoint = Vector2.new(0, 0)
ToggleButton.Text = "F"
ToggleButton.BackgroundColor3 = Color3.fromRGB(5, 5, 5)
ToggleButton.TextColor3 = Color3.new(1, 1, 1)
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.TextSize = 24
ToggleButton.ZIndex = 10
ToggleButton.Parent = Gui
ApplyStyle(ToggleButton, 6)

-- Make Main Window draggable (Mobile support)
local dragging = false
local dragInput, dragStart, startPos
local MainFrame -- This will hold the reference to the MainFrame, which will be draggable

ToggleButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position

        input.Changed:Connect(function()  
            if input.UserInputState == Enum.UserInputState.End then  
                dragging = false  
            end  
        end)  
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
end)

local MainVisible = false

local function AnimateWindow(window, show)
    local tweenInfo = TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

    if show then  
        window.Visible = true  
        window.Position = UDim2.new(0.5, 0, 0.5, 0)  
        window.Size = UDim2.new(0, 0, 0, 0)  
        window.BackgroundTransparency = 1  

        TweenService:Create(window, tweenInfo, {  
            Position = UDim2.new(0.5, -300, 0.5, -175),  
            Size = UDim2.new(0, 600, 0, 350),  
            BackgroundTransparency = 0  
        }):Play()  
    else  
        local closeTween = TweenService:Create(window, tweenInfo, {  
            Size = UDim2.new(0, 0, 0, 0),  
            Position = UDim2.new(0.5, 0, 0.5, 0),  
            BackgroundTransparency = 1  
        })  
        closeTween:Play()  
        closeTween.Completed:Once(function()  
            window.Visible = false  
        end)  
    end
end

ToggleButton.MouseButton1Click:Connect(function()
    MainVisible = not MainVisible
    for _, window in ipairs(Windows) do
        AnimateWindow(window, MainVisible)
    end
end)

function Library:MakeWindow(config)
    local Window = {}
    MainFrame = Instance.new("Frame")
    MainFrame.Size = UDim2.new(0, 600, 0, 350)
    MainFrame.Position = UDim2.new(0.5, -300, 0.5, -175)
    MainFrame.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    MainFrame.BorderSizePixel = 0
    MainFrame.Name = config.Name or "Window"
    MainFrame.Active = true
    MainFrame.Visible = false
    MainFrame.Parent = Gui
    ApplyStyle(MainFrame, 10)

    table.insert(Windows, MainFrame)  

    local TopBar = Instance.new("TextLabel", MainFrame)  
    TopBar.Size = UDim2.new(1, 0, 0, 40)  
    TopBar.Text = config.Name or "Fluxcore Window"  
    TopBar.BackgroundColor3 = Color3.fromRGB(15, 15, 15)  
    TopBar.TextColor3 = Color3.new(1, 1, 1)  
    TopBar.Font = Enum.Font.GothamBlack  
    TopBar.TextSize = 24  
    TopBar.BorderSizePixel = 0  
    ApplyStyle(TopBar)  

    local SideBarScroll = Instance.new("ScrollingFrame", MainFrame)  
    SideBarScroll.Size = UDim2.new(0, 100, 1, -40)  
    SideBarScroll.Position = UDim2.new(0, 0, 0, 40)  
    SideBarScroll.BackgroundColor3 = Color3.fromRGB(5, 5, 5)  
    SideBarScroll.BorderSizePixel = 0  
    SideBarScroll.ScrollBarThickness = 6  
    SideBarScroll.CanvasSize = UDim2.new(0, 0, 0, 0)  
    SideBarScroll.AutomaticCanvasSize = Enum.AutomaticSize.Y  
    SideBarScroll.ClipsDescendants = true  
    SideBarScroll.ScrollingDirection = Enum.ScrollingDirection.Y  
    ApplyStyle(SideBarScroll)  

    local TabButtonLayout = Instance.new("UIListLayout", SideBarScroll)  
    TabButtonLayout.Padding = UDim.new(0, 5)  
    TabButtonLayout.SortOrder = Enum.SortOrder.LayoutOrder  

    local ContentArea = Instance.new("Frame", MainFrame)  
    ContentArea.Size = UDim2.new(1, -100, 1, -40)  
    ContentArea.Position = UDim2.new(0, 100, 0, 40)  
    ContentArea.BackgroundColor3 = Color3.fromRGB(8, 8, 8)  
    ContentArea.BorderSizePixel = 0  
    ApplyStyle(ContentArea)  

    local Tabs = {}  
    local CurrentTab  

    function Window:MakeTab(info)  
        local Tab = {}  
        local TabButton = Instance.new("TextButton", SideBarScroll)  
        TabButton.Size = UDim2.new(1, 0, 0, 30)  
        TabButton.Text = info.Name or "Tab"  
        TabButton.BackgroundColor3 = Color3.fromRGB(20, 20, 20)  
        TabButton.TextColor3 = Color3.new(1, 1, 1)  
        TabButton.Font = Enum.Font.GothamSemibold  
        TabButton.TextSize = 16  
        ApplyStyle(TabButton)  

        local Content = Instance.new("ScrollingFrame", ContentArea)  
        Content.Size = UDim2.new(1, -10, 1, -10)  
        Content.Position = UDim2.new(0, 5, 0, 5)  
        Content.BackgroundColor3 = Color3.fromRGB(15, 15, 15)  
        Content.BorderSizePixel = 0  
        Content.Visible = false  
        Content.ScrollBarThickness = 6  
        Content.AutomaticCanvasSize = Enum.AutomaticSize.Y  
        ApplyStyle(Content)  

        local layout = Instance.new("UIListLayout", Content)  
        layout.Padding = UDim.new(0, 6)  
        layout.SortOrder = Enum.SortOrder.LayoutOrder  

        local padding = Instance.new("UIPadding", Content)  
        padding.PaddingLeft = UDim.new(0, 5)  
        padding.PaddingRight = UDim.new(0, 5)  
        padding.PaddingTop = UDim.new(0, 5)  
        padding.PaddingBottom = UDim.new(0, 5)  

        function Tab:Show()  
            if CurrentTab == Content then  
                Content.Visible = false  
                TabButton.BackgroundColor3 = Color3.fromRGB(20, 20, 20)  
                CurrentTab = nil  
            else  
                if CurrentTab then  
                    CurrentTab.Visible = false  
                end  
                for _, t in pairs(Tabs) do  
                    t.Button.BackgroundColor3 = Color3.fromRGB(20, 20, 20)  
                end  
                Content.Visible = true  
                TabButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)  
                CurrentTab = Content  
            end  
        end  

        TabButton.MouseButton1Click:Connect(function()  
            Tab:Show()  
        end)

        function Tab:AddButton(opts)
			local btn = Instance.new("TextButton", Content)
			btn.Size = UDim2.new(1, 0, 0, 30)
			btn.Text = opts.Name or "Button"
			btn.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
			btn.TextColor3 = Color3.new(1, 1, 1)
			btn.Font = Enum.Font.GothamSemibold
			btn.TextSize = 16
			ApplyStyle(btn)
			btn.MouseButton1Click:Connect(opts.Callback)
		end

		function Tab:AddLabel(txt)
			local lbl = Instance.new("TextLabel", Content)
			lbl.Size = UDim2.new(1, 0, 0, 30)
			lbl.Text = txt
			lbl.BackgroundTransparency = 1
			lbl.TextColor3 = Color3.new(1, 1, 1)
			lbl.Font = Enum.Font.GothamBlack
			lbl.TextSize = 20
		end

		function Tab:AddTextbox(opts)
			local box = Instance.new("TextBox", Content)
			box.Size = UDim2.new(1, 0, 0, 30)
			box.Text = opts.Default or ""
			box.ClearTextOnFocus = opts.TextDisappear or false
			box.TextColor3 = Color3.new(1, 1, 1)
			box.Font = Enum.Font.GothamSemibold
			box.TextSize = 16
			box.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
			ApplyStyle(box)
			box.FocusLost:Connect(function()
				opts.Callback(box.Text)
			end)
		end

		function Tab:AddSlider(opts)
            local sliderFrame = Instance.new("Frame", Content)
            sliderFrame.Size = UDim2.new(1, 0, 0, 40)
            sliderFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
            ApplyStyle(sliderFrame)

            local titleLabel = Instance.new("TextLabel", sliderFrame)
            titleLabel.Size = UDim2.new(0, 100, 1, 0)
            titleLabel.Position = UDim2.new(0, 5, 0, 0)
            titleLabel.Text = opts.Name or "Slider"
            titleLabel.BackgroundTransparency = 1
            titleLabel.TextColor3 = Color3.new(1, 1, 1)
            titleLabel.Font = Enum.Font.GothamSemibold
            titleLabel.TextSize = 16
            titleLabel.TextXAlignment = Enum.TextXAlignment.Left

            local sliderBar = Instance.new("Frame", sliderFrame)
            sliderBar.Size = UDim2.new(1, -120, 0, 6)
            sliderBar.Position = UDim2.new(0, 110, 0.5, -3)
            sliderBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            sliderBar.BorderSizePixel = 0
            ApplyStyle(sliderBar, 3)

            local fill = Instance.new("Frame", sliderBar)
            fill.Size = UDim2.new(0, 0, 1, 0)
            fill.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
            fill.BorderSizePixel = 0
            ApplyStyle(fill, 3)

            local value = opts.Default or opts.Min or 0
            local dragging = false

            local function updateValue(inputX)
                local relative = math.clamp((inputX - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
                value = math.floor((opts.Min + (opts.Max - opts.Min) * relative) * 100) / 100
                fill.Size = UDim2.new(relative, 0, 1, 0)
                if opts.Callback then
                    opts.Callback(value)
                end
            end

            sliderBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                    updateValue(input.Position.X)
                end
            end)

            game:GetService("UserInputService").InputChanged:Connect(function(input)
                if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                    updateValue(input.Position.X)
                end
            end)

            game:GetService("UserInputService").InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = false
                end
            end)
        end

        function Tab:AddToggle(opts)
            local toggleFrame = Instance.new("Frame", Content)
            toggleFrame.Size = UDim2.new(1, 0, 0, 30)
            toggleFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
            toggleFrame.BorderSizePixel = 0
            ApplyStyle(toggleFrame)

            local toggleButton = Instance.new("TextButton", toggleFrame)
            toggleButton.Size = UDim2.new(1, 0, 1, 0)
            toggleButton.BackgroundTransparency = 1
            toggleButton.Text = opts.Name or "Toggle"
            toggleButton.TextColor3 = Color3.new(1, 1, 1)
            toggleButton.Font = Enum.Font.GothamSemibold
            toggleButton.TextSize = 16
            toggleButton.TextXAlignment = Enum.TextXAlignment.Left

            local toggleIndicator = Instance.new("Frame", toggleFrame)
            toggleIndicator.Size = UDim2.new(0, 20, 0, 20)
            toggleIndicator.Position = UDim2.new(1, -25, 0.5, -10)
            toggleIndicator.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            ApplyStyle(toggleIndicator, 4)

            local state = opts.Default or false

            local function updateVisual()
                toggleIndicator.BackgroundColor3 = state and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(35, 35, 35)
            end

            toggleButton.MouseButton1Click:Connect(function()
                state = not state
                updateVisual()
                if opts.Callback then
                    opts.Callback(state)
                end
            end)

            updateVisual()
        end
        
        Tab.Button = TabButton  
        table.insert(Tabs, Tab)  
        return Tab  
    end  

    return Window
end

function Library:MakeNotification(data)
    local msg = Instance.new("TextLabel", Gui)
    msg.Size = UDim2.new(0, 300, 0, 50)
    msg.Position = UDim2.new(1, -310, 1, -100)
    msg.Text = data.Content or "Notification"
    msg.BackgroundColor3 = Color3.fromRGB(0, 100, 0)
    msg.TextColor3 = Color3.new(1, 1, 1)
    msg.Font = Enum.Font.GothamBlack
    msg.TextSize = 20
    msg.TextWrapped = true
    ApplyStyle(msg)
    game:GetService("Debris"):AddItem(msg, data.Time or 3)
end

function Library:Init()
    print("Fluxcore.Hub Initialized")
end

function Library:Destroy()
    if Gui then Gui:Destroy() end
end

return Library
